#extracts from most file types
function extract {
	echo Extracting $1 ...
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2)  tar xjf $1      ;;
			*.tar.gz)   tar xzf $1      ;;
			*.bz2)      bunzip2 $1      ;;
			*.rar)      rar x $1        ;;
			*.gz)       gunzip $1       ;;
			*.tar)      tar xf $1       ;;
			*.tbz2)     tar xjf $1      ;;
			*.tgz)      tar xzf $1      ;;
			*.zip)      unzip $1        ;;
			*.Z)        uncompress $1   ;;
			*.7z)       7z x $1         ;;
			*)          echo "'$1' cannot be extracted via extract()" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
	echo Extraction Complete
}
# Extracts then removes archive
extractrm() {
	if [ -f $1 ] ; then
		extract $1
		rm $1
	else
		echo "Need valid file"
	fi
}
# Color man pages with less (is a `most` way too...)
man() {
	env \
	LESS_TERMCAP_mb=$(printf "\e[1;31m") \
	LESS_TERMCAP_md=$(printf "\e[1;31m") \
	LESS_TERMCAP_me=$(printf "\e[0m") \
	LESS_TERMCAP_se=$(printf "\e[0m") \
	LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
	LESS_TERMCAP_ue=$(printf "\e[0m") \
	LESS_TERMCAP_us=$(printf "\e[1;32m") \
	man "$@"
}
#unzips then removes zip archive
ziprm () {
	if [ -f $1 ] ; then
		unzip $1
		rm $1
	else
		echo "Need a valid zipfile"
	fi
}
#greps processes
psgrep() {
	if [ ! -z $1 ] ; then
		echo "Grepping for processes matching $1..."
		ps aux | grep $1 | grep -v grep
	else
		echo "!! Need name to grep for"
	fi
}
#netinfo - shows network information for your system
netinfo ()
{
	echo "--------------- Network Information ---------------"
	/sbin/ifconfig | awk /'inet addr/ {print $2}'
	/sbin/ifconfig | awk /'Bcast/ {print $3}'
	/sbin/ifconfig | awk /'inet addr/ {print $4}'
	/sbin/ifconfig | awk /'HWaddr/ {print $4,$5}'
	myip=`lynx -dump -hiddenlinks=ignore -nolist http://checkip.dyndns.org:8245/ | sed '/^$/d; s/^[ ]*//g; s/[ ]*$//g' `
	echo "${myip}"
	echo "---------------------------------------------------"
}
ipinfo() { 
	local IP1 IP2
	IP1="$1"
	IP2="$(echo "${IP1}" | grep -Ec '^(([0-9a-f]{0,4}:){1,7}[0-9a-f]{1,4}|([0-9]{1,3}\.){3}[0-9]{1,3})$')"
	if [[ ${IP2} == "1" ]]; then
		curl ipinfo.io/"$IP1"
	  else
		ipawk=($(host "$IP1" | awk '/address/ { print $NF }'))
		curl ipinfo.io/${ipawk[1]}
	fi
	echo
}
#dirsize - finds directory sizes and lists them for the current directory
dirsize ()
{
	du -shx * .[a-zA-Z0-9_]* 2> /dev/null | \
	egrep '^ *[0-9.]*[MG]' | sort -n > /tmp/list
	egrep '^ *[0-9.]*M' /tmp/list
	egrep '^ *[0-9.]*G' /tmp/list
	rm -rf /tmp/list
}
#copy and go to dir
cpg (){
  	if [ -d "$2" ];then
    		cp $1 $2 && cd $2
  	else
    		cp $1 $2
  	fi
}

#move and go to dir
mvg (){
  	if [ -d "$2" ];then
    		mv $1 $2 && cd $2
  	else
    		mv $1 $2
  	fi
}
up() { cd $(eval printf '../'%.0s {1..$1}) && pwd; }
fnd () {
	if [ ! -z "$1" ] ; then
		find . ! -name 'documentation' ! -name '*.svn' ! -name 'target' ! -name '*.html' -name "$1"
		grep -rnw . -e "$1"
	else
		echo "Need name to search for"
	fi	
}

#um functionality to record custom notes for man pages
function mdless() {
      pandoc -s -f markdown -t man $1 | groff -T utf8 -man | less;
}
umedit() { mkdir -p ~/.notes; vim ~/.notes/$1; }
um() { mdless ~/.notes/"$1"; }
umls() { ls ~/.notes; }

